{"version":3,"sources":["App.js","assets/twitter-logo.svg","index.js"],"names":["anchor","require","SystemProgram","web3","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","tipValue","setTipValue","gifList","setGifList","baseAccount","setBaseAccount","baseAccountBump","setBaseAccountBump","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","connectWallet","onInputChange","e","value","target","onTipChange","getProvider","connection","Connection","Provider","createGifAccount","provider","program","Program","rpc","initialize","BN","accounts","user","wallet","systemProgram","programId","getGifList","sendTip","event","owner","tip","LAMPORTS_PER_SOL","to","tx","voteGif","JSON","parse","i","voters","length","bn","_bn","b","updateItem","gifLink","sendGif","addGif","useEffect","getBaseAccount","bump","findProgramAddress","Buffer","from","account","onLoad","addEventListener","removeEventListener","fetch","className","onClick","type","placeholder","onChange","map","item","index","src","alt","votes","userAddress","stringify","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12d3b362.chunk.js","sourcesContent":["import twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport { useEffect, useState } from 'react';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport {\n  Program, Provider, web3\n} from '@project-serum/anchor';\nimport idl from './idl.json';\nimport BN from 'bn.js';\nconst anchor = require('@project-serum/anchor');\n\n// SystemProgram is a reference to the Solana runtime\nconst { SystemProgram } = web3;\n\n// Get our programs id from the idl file\nconst programID = new PublicKey(idl.metadata.address);\n\nconst network = clusterApiUrl('devnet');\n\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n// Constants\nconst TWITTER_HANDLE = 'WallyWilliams2';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst TWITTER_BUILDSPACE = `https://twitter.com/_buildspace`;\n\nconst App = () => {\n  \n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [tipValue, setTipValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n  const [baseAccount, setBaseAccount] = useState(null);\n  const [baseAccountBump, setBaseAccountBump] = useState(null);\n\n  const checkIfWalletIsConnected = async () => {\n        \n    try {\n      const { solana } = window;\n      \n      if (solana) {\n        if (solana.isPhantom) {\n          console.log(\"Phantom wallet found!\")\n\n          //solana.on('connect', callback(response))\n\n          const response = await solana.connect( {onlyIfTrusted: true });\n          console.log(\n            'Connected with public key:',\n            response.publicKey.toString()\n          );\n\n          setWalletAddress(response.publicKey.toString());\n        \n        } else {\n        alert('Solana object not found! Get a Phantom wallet');\n        }\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n      \n    if (solana) {  \n      const response = await solana.connect();\n      console.log('Connected with public key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const onInputChange = (e) => {\n    const { value } = e.target;\n    setInputValue(value);\n  };\n\n  const onTipChange = (e) => {\n    const { value } = e.target;\n    setTipValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment\n    );\n    return provider;\n  }\n\n  const createGifAccount = async () => {\n    try{\n      console.log(baseAccount)\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\")\n      console.log(baseAccountBump)\n      await program.rpc.initialize(new BN(baseAccountBump), {\n        accounts: {\n          baseAccount: baseAccount,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n      });\n\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.toString())\n      await getGifList();\n    } catch(error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  const sendTip = async(event) => {\n    console.log(\"Your tip is on its way!\")\n    const { value } = event.target\n    \n    const owner = new web3.PublicKey(value);\n    const tip = new anchor.BN(tipValue * web3.LAMPORTS_PER_SOL)\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(provider.wallet.publicKey.toString());\n      const tx = await program.rpc.sendTip(tip, {\n        accounts: {\n          user: provider.wallet.publicKey,\n          to: owner,\n          systemProgram: SystemProgram.programId,\n        },\n      });\n\n      console.log(\"Tip was processed with transaction signature\", tx);\n    } catch (error) {\n      console.log(\"Error sending tip:\", error)\n    }\n  }\n\n  const voteGif = async (event) => {\n    let { value } = event.target\n    value = JSON.parse(value)\n    for (let i=0; i<value.voters.length; i++) {\n      let bn = new BN(value.voters[i]._bn, 16)\n      let b = new PublicKey(bn)\n      console.log(b.toString())\n    }\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.updateItem(value.gifLink, {\n        accounts: {\n          baseAccount: baseAccount,\n          user: provider.wallet.publicKey,\n        },\n      });\n\n      await getGifList()\n    } catch (error) {\n      console.log(\"Error voting for GIF:\", error)\n    }\n  }\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    } \n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount,\n          user: provider.wallet.publicKey,\n        },\n      });\n\n      await getGifList()\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  };\n\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do One-Time Initialization for Gif Program Account\n          </button>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"connected-container\">\n          <input \n            type=\"text\" \n            placeholder=\"Enter gif link!\" \n            value={inputValue}\n            onChange={onInputChange}\n          />\n          <button className=\"cta-button submit-gif-button\" onClick={sendGif}> \n            Submit \n          </button>\n          <div className=\"gif-grid\">\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink} alt='Seinfeld GIF'/>\n                <div className=\"my-2\">\n                  <span className=\"body-text justify-content-center\">{`Votes: ${item.votes}`}</span>\n                </div>\n                <div className='d-flex justify-content-center'>\n                  <div>\n                    <input \n                      type=\"text\" \n                      placeholder=\"Enter tip amount (in SOL)\"\n                      onChange={onTipChange}\n                    />\n          \n                    <button \n                      className='justify-content-center cta-button submit-gif-button'\n                      value={item.userAddress.toString()}\n                      onClick={sendTip}\n                    >\n                      Tip\n                    </button>\n                    <button \n                      className='me-btn justify-content-center gradientBorder'\n                      value={JSON.stringify(item)} \n                      onClick={voteGif}\n                    >\n                      Upvote\n                    </button>\n                  </div>\n                </div>\n                \n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    }\n  };\n\n  useEffect(() => {\n    \n    const getBaseAccount = async () => {\n      let account, bump = null;\n      [account, bump] = await web3.PublicKey.findProgramAddress(\n        [Buffer.from(\"seinfeld\")],\n        programID\n      );\n      setBaseAccount(account);\n      setBaseAccountBump(bump);\n    };\n    getBaseAccount();\n    \n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad); // this will remove the eventListener on demounting to clean up\n  }, []); // remember this empty is a way to run this code when this component mounts for the first time\n  \n  const getGifList = async() => {\n    try{\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount);\n\n      setGifList(account.gifList)\n    } catch(error) {\n      console.log(\"Error in getGifs:\", error)\n      setGifList(null);\n    }\n  }\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList()\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? 'authed-container' : 'container'}> \n        <div className=\"header-container\">\n          <p className=\"header\">Seinfeld GIF Portal</p>\n          <p className=\"sub-text\">\n            Relive your favourite Seinfeld moments with this Seinfeld themed GIF collection in the metaverse ✨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          \n        </div>\n        {walletAddress && renderConnectedContainer()}\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <span className=\"footer-text\">\n            {`Built by `}\n            <a\n              className=\"footer-text\"\n              href={TWITTER_LINK}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              {` @${TWITTER_HANDLE}`}\n            </a>\n              {` on `}\n            <a\n              className=\"footer-text\"\n              href={TWITTER_BUILDSPACE}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              _buildspace\n            </a>\n          </span>\n          <a className=\"footer-text\" href=\"https://solana.com/\">Powered by Solana</a>\n          <img className=\"twitter-logo\" src=\"https://pbs.twimg.com/profile_images/1428863362079854592/PjbUigJo_400x400.jpg\" />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}